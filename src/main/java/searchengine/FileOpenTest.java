package searchengine;

import java.io.*;
import java.nio.file.*;
import java.awt.Desktop;

public class FileOpenTest {
    public static void main(String[] args) {
        System.out.println("=== File Opening Test ===");
        System.out.println("OS: " + System.getProperty("os.name"));
        System.out.println("Java version: " + System.getProperty("java.version"));
        
        // Test with a simple file in the current directory
        String testFile = "pom.xml"; // This should exist
        
        System.out.println("\nTesting file opening for: " + testFile);
        System.out.println("File exists: " + Files.exists(Paths.get(testFile)));
        
        try {
            Path path = Paths.get(testFile).toAbsolutePath();
            System.out.println("Absolute path: " + path);
            
            String os = System.getProperty("os.name").toLowerCase();
            Process process = null;
            
            if (os.contains("mac")) {
                System.out.println("Using macOS 'open' command");
                process = Runtime.getRuntime().exec("open", new String[]{path.toString()});
            } else if (os.contains("win")) {
                System.out.println("Using Windows 'start' command");
                process = Runtime.getRuntime().exec("cmd /c start " + path.toString());
            } else {
                System.out.println("Using Linux 'xdg-open' command");
                process = Runtime.getRuntime().exec("xdg-open", new String[]{path.toString()});
            }
            
            // Wait for the process
            boolean success = process.waitFor(5, java.util.concurrent.TimeUnit.SECONDS);
            int exitCode = process.exitValue();
            
            System.out.println("Process success: " + success);
            System.out.println("Exit code: " + exitCode);
            
            if (success && exitCode == 0) {
                System.out.println("✓ File opened successfully!");
            } else {
                System.out.println("⚠ Process completed but may have failed");
            }
            
        } catch (Exception e) {
            System.out.println("❌ Error: " + e.getMessage());
            e.printStackTrace();
        }
        
        // Test with Desktop API as alternative
        System.out.println("\n=== Testing Desktop API ===");
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.OPEN)) {
                    System.out.println("Desktop API is supported");
                    File file = new File(testFile);
                    if (file.exists()) {
                        System.out.println("Opening with Desktop API...");
                        desktop.open(file);
                        System.out.println("✓ Desktop API call completed");
                    } else {
                        System.out.println("❌ File doesn't exist for Desktop API");
                    }
                } else {
                    System.out.println("❌ Desktop OPEN action not supported");
                }
            } else {
                System.out.println("❌ Desktop API not supported");
            }
        } catch (Exception e) {
            System.out.println("❌ Desktop API error: " + e.getMessage());
            e.printStackTrace();
        }
    }
} 